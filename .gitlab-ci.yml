stages:
  - build
  - test
  - cleanup
  - deploy

############################################
# System templates
############################################

# Windows
.template_windows_32: &win32
  tags:
    - windows
    - x86
  before_script:
    - "echo off"
    - 'call "%VS140COMNTOOLS%\..\..\VC\bin\vcvars32.bat"'
    - set CMAKE_GENERATOR=Visual Studio 14 2015
    - set CI_DIR=C:\ci\%CI_PIPELINE_ID%_32
    - set NETGEN_BUILD_DIR=%CI_DIR%\build
    - set INSTALL_DIR=%CI_DIR%\install
    - set NETGENDIR=%INSTALL_DIR%\bin
    - set PYTHONPATH=%INSTALL_DIR%\lib\site-packages
    - set CMAKE_CONFIG=-DUSE_MKL=OFF -DUSE_OCC=ON

.template_windows_64: &win64
  tags:
    - windows
    - x64
  before_script:
    - "echo off"
    - 'call "%VS140COMNTOOLS%\..\..\VC\bin\amd64\vcvars64.bat"'
    - set CMAKE_GENERATOR=Visual Studio 14 2015 Win64
    - set CI_DIR=C:\ci\%CI_PIPELINE_ID%_64
    - set NETGEN_BUILD_DIR=%CI_DIR%\build
    - set INSTALL_DIR=%CI_DIR%\install
    - set NETGENDIR=%INSTALL_DIR%\bin
    - set PYTHONPATH=%INSTALL_DIR%\lib\site-packages
    - set UPLOAD_DIR=/home/tester/deploy/win64/%CI_BUILD_TAG%%CI_BUILD_REF%/
    - set MKL_CONFIG=-DUSE_MKL=ON -DMKL_STATIC=ON -DMKL_ROOT="C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/mkl"

# Linux
.template_ubuntu: &ubuntu
  tags:
    - linux
  before_script:
    - pwd
    - ls
    - docker info

.template_ubuntu_1510: &ubuntu_1510
  <<: *ubuntu
  variables:
    UBUNTU_VERSION: "15.10"
    UBUNTU_VERSION_NAME: "wily"

.template_ubuntu_1604: &ubuntu_1604
  <<: *ubuntu
  variables:
    UBUNTU_VERSION: "16.04"
    UBUNTU_VERSION_NAME: "xenial"

.template_ubuntu_1610: &ubuntu_1610
  <<: *ubuntu
  variables:
    UBUNTU_VERSION: "16.10"
    UBUNTU_VERSION_NAME: "yakkety"

# MacOSX
.template_mac: &mac
  tags:
    - mac
  before_script:
    - export BUILD_DIR=/tmp/$CI_PIPELINE_ID
    - export INSTALL_DIR=/tmp/$CI_PIPELINE_ID/install/NGSolve.app
    - export MACOSX_DEPLOYMENT_TARGET=10.9
    - export PYTHONPATH=$INSTALL_DIR/Contents/Resources/lib/python3.6/site-packages:.
    - export NETGENDIR=$INSTALL_DIR/Contents/MacOS
    - export DYLD_LIBRARY_PATH=$NETGENDIR
    - export DYLD_FRAMEWORK_PATH=$NETGENDIR/../Frameworks
    - export PATH=$NETGENDIR:$PATH

############################################
# Build stage
############################################

# Windows
.template_build_win: &build_win
  stage: build
  script:
    - git submodule update --init --recursive
    - rd /s /q %NETGEN_BUILD_DIR%
    - mkdir %NETGEN_BUILD_DIR%
    - cd %NETGEN_BUILD_DIR%
    - >-
        cmake %CI_PROJECT_DIR%
        -G"%CMAKE_GENERATOR%"
        -DINSTALL_DIR=%INSTALL_DIR%
        %CMAKE_CONFIG%
        -DUSE_UMFPACK=ON
        -DCMAKE_BUILD_TYPE=Release
    - cmake --build . --target INSTALL --config Release
    - cmake --build . --target PACKAGE --config Release
    - >-
      rsync -ztrl --del -e ssh
      --rsync-path="mkdir -p deploy/builds/%CI_PIPELINE_ID%/windows && rsync"
      *.msi
      gitlab-runner@vector.asc.tuwien.ac.at:deploy/builds/%CI_PIPELINE_ID%/windows/

.win32_build:
  <<: *win32
  <<: *build_win

win64_build:
  <<: *win64
  <<: *build_win

# Linux
.template_build_linux: &build_linux
  stage: build
  script:
    - docker build -t ngsolve_${CI_PIPELINE_ID}:$UBUNTU_VERSION -f tests/docker_$UBUNTU_VERSION .
    - rm -f ngsolve_${CI_PIPELINE_ID}_$UBUNTU_VERSION.id
    - >-
      docker run
      --cidfile ngsolve_${CI_PIPELINE_ID}_$UBUNTU_VERSION.id
      -e MKLROOT=/opt/intel/mkl
      -e NETGENDIR=/opt/netgen/bin
      -e UBUNTU_VERSION_NAME=$UBUNTU_VERSION_NAME
      -e CI_BUILD_REF=$CI_BUILD_REF
      -e CI_PIPELINE_ID=$CI_PIPELINE_ID
      -e CCACHE_DIR=/ccache
      -e SSH_PRIVATE_KEY="$SSH_PRIVATE_KEY"
      -v /opt/intel:/opt/intel
      -v /mnt/ccache:/ccache ngsolve_${CI_PIPELINE_ID}:$UBUNTU_VERSION
      bash /root/src/ngsolve/tests/build.sh
    - docker commit `cat ngsolve_${CI_PIPELINE_ID}_$UBUNTU_VERSION.id` ngsolve_${CI_PIPELINE_ID}_installed:$UBUNTU_VERSION

ubuntu_1510_build:
  <<: *ubuntu_1510
  <<: *build_linux

ubuntu_1604_build:
  <<: *ubuntu_1604
  <<: *build_linux

ubuntu_1610_build:
  <<: *ubuntu_1610
  <<: *build_linux

mac_build:
  <<: *mac
  stage: build
  script:
    - git submodule update --init --recursive
    - rm -rf $BUILD_DIR
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - cmake $CI_PROJECT_DIR -DINSTALL_DIR=$INSTALL_DIR -DUSE_CCACHE=ON -DCMAKE_BUILD_TYPE=Release -DUSE_UMFPACK=ON
    - make -j10 install
    - osascript -e 'tell application "Finder" to eject (every disk whose ejectable is true)'
    - make bundle
    - >-
      rsync -ztrl --del -e ssh
      --rsync-path="mkdir -p deploy/builds/$CI_PIPELINE_ID/macos && rsync"
      *.dmg
      gitlab-runner@vector.asc.tuwien.ac.at:deploy/builds/$CI_PIPELINE_ID/macos/

############################################
# Test stage
############################################

# Windows
.template_test_win: &test_win
  stage: test
  script:
    - cd %NETGEN_BUILD_DIR%/ngsolve
    - ctest -C Release -V
    - cd ..

# skip since we have no machine with 32 bits
.test_win32:
  <<: *win32
  <<: *test_win

win64_test:
  <<: *win64
  <<: *test_win

# Linux
.template_test_linux: &test_linux
  stage: test
  script:
    - >-
      docker run
      -e NETGENDIR=/opt/netgen/bin
      -e PYTHONPATH=/opt/netgen/lib/python3/dist-packages
      -e MKLROOT=/opt/intel/mkl
      -e LD_LIBRARY_PATH=/opt/intel/mkl/lib/intel64
      -v /opt/intel:/opt/intel
      ngsolve_${CI_PIPELINE_ID}_installed:$UBUNTU_VERSION
      bash -c 'cd /root/build/ngsolve && make test_ngsolve ARGS="-V"'

ubuntu_1510_test:
  <<: *ubuntu_1510
  <<: *test_linux

ubuntu_1604_test:
  <<: *ubuntu_1604
  <<: *test_linux

ubuntu_1610_test:
  <<: *ubuntu_1610
  <<: *test_linux

mac_test:
  <<: *mac
  stage: test
  script:
    - cd $BUILD_DIR/ngsolve
    - ctest . -V

############################################
# Cleanup stage
############################################

linux_cleanup:
  stage: cleanup
  tags:
    - linux
  script:
    # remove old docker images
    docker rmi -f ngsolve_${CI_PIPELINE_ID}_installed:$UBUNTU_VERSION
    docker images --no-trunc -aqf "dangling=true" | xargs docker rmi -f
  when: always
  allow_failure: true

win64_cleanup:
  <<: *win64
  stage: cleanup
  tags:
    - windows
    - x64
  script:
    - cd %CI_PROJECT_DIR%
    - rd /s /q %CI_DIR%
  when: always
  allow_failure: true

.win32_cleanup:
  <<: *win32
  stage: cleanup
  tags:
    - windows
    - x86
  script:
    - cd %CI_PROJECT_DIR%
    - rd /s /q %CI_DIR%
  when: always
  allow_failure: true

cleanup_mac:
  <<: *mac
  stage: cleanup
  script:
    - rm -rf $BUILD_DIR
  when: always
  allow_failure: true

############################################
# Deploy stage
############################################

deploy_release:
  stage: deploy
  tags:
    - linux
  script:
    - /home/gitlab-runner/deploy/deploy_release.sh $CI_PIPELINE_ID $CI_BUILD_TAG
  only:
    - tags
  environment: deploy_release

deploy_nightly:
  stage: deploy
  tags:
    - linux
  script:
    - /home/gitlab-runner/deploy/deploy_nightly.sh $CI_PIPELINE_ID
  only:
    - triggers
  except:
    - tags
  environment: deploy_nigthly

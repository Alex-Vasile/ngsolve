stages:
  - build
  - test
  - cleanup

############################################
# System templates
############################################

# Windows
.template_windows_32: &win32
  tags:
    - windows
    - x86
  before_script:
    - "echo off"
    - 'call "%VS140COMNTOOLS%\..\..\VC\bin\vcvars32.bat"'
    - set EXT_LIBS=C:\external_libs\x86
    - set CMAKE_GENERATOR=Visual Studio 14 2015
    - set INSTALL_DIR=C:/install32
    - set NETGENDIR=C:\install32\bin
    - set PYTHONPATH=C:\install32\lib\site-packages
    - set PYTHON_LIB=C:/Python3.5_32/libs/python35.lib
    - set PYTHON_CONFIG=-DPYTHON_LIBRARY=C:/Python3.5_32/libs/python35.lib -DPYTHON_INCLUDE_DIR=C:/Python3.5_32/include -DPYTHON_INCLUDE_DIR2=C:/Python3.5_32/include 

.template_windows_64: &win64
  tags:
    - windows
    - x64
  before_script:
    - "echo off"
    - 'call "%VS140COMNTOOLS%\..\..\VC\bin\amd64\vcvars64.bat"'
    - set EXT_LIBS=C:\external_libs\x64
    - set CMAKE_GENERATOR=Visual Studio 14 2015 Win64
    - set INSTALL_DIR=C:/install64
    - set NETGENDIR=C:\install64\bin
    - set PYTHONPATH=C:\install64\lib\site-packages
    - set PYTHON_LIB=C:/Python3.5/libs/python35.lib
    - set PYTHON_CONFIG=-DPYTHON_LIBRARY=C:/Python3.5/libs/python35.lib

# Linux
.template_ubuntu: &ubuntu
  tags:
    - linux
  before_script:
    - pwd
    - ls
    - docker info

.template_ubuntu_1510: &ubuntu_1510
  <<: *ubuntu
  variables:
    UBUNTU_VERSION: "15.10"

.template_ubuntu_1604: &ubuntu_1604
  <<: *ubuntu
  variables:
    UBUNTU_VERSION: "16.04"

############################################
# Build stage
############################################

# Windows
.template_build_win: &build_win
  stage: build
  script:
    - if not exist build MKDIR build
    - cd build
    - DEL CMakeCache.txt
    - RD /S CMakeFiles
    - >-
        cmake ..\
        -DADDITIONAL_PATHS="%EXT_LIBS%\ext_libs"
        %PYTHON_CONFIG%
        -G"%CMAKE_GENERATOR%"
        -DINSTALL_DIR="%INSTALL_DIR%"
        -DUSE_MKL=ON
        -DMKL_STATIC=ON
        -DCMAKE_CXX_FLAGS_RELEASE="/W0"
    - cmake --build . --target INSTALL --config Release

build_win32:
  <<: *win32
  <<: *build_win
  cache:
    paths:
      - build/
    key: "ngsolve_win32"

build_win64:
  <<: *win64
  <<: *build_win
  cache:
    paths:
      - build/
    key: "ngsolve_win64"

# Linux
.template_build_linux: &build_linux
  stage: build
  script:
    - docker build -t ngsolve:$UBUNTU_VERSION -f tests/docker_$UBUNTU_VERSION .
    - rm -f ngsolve_$UBUNTU_VERSION.id
    - >-
      docker run
      --cidfile ngsolve_$UBUNTU_VERSION.id
      -e MKLROOT=/opt/intel/mkl
      -e NETGENDIR=/opt/netgen/bin
      -e CCACHE_DIR=/ccache
      -v /opt/intel:/opt/intel
      -v /mnt/ccache:/ccache ngsolve:$UBUNTU_VERSION
      bash /root/src/ngsolve/tests/build.sh
    - docker commit `cat ngsolve_$UBUNTU_VERSION.id` ngsolve_installed:$UBUNTU_VERSION

build_ubuntu_1510:
  <<: *ubuntu_1510
  <<: *build_linux

build_ubuntu_1604:
  <<: *ubuntu_1604
  <<: *build_linux

############################################
# Test stage
############################################

# Windows
.template_test_win: &test_win
  stage: test
  script:
    - cd build
    - ctest -C Release -V

# skip since we have no machine with 32 bits
.test_win32:
  <<: *win32
  <<: *test_win
  cache:
    paths:
      - build/
    key: "ngsolve_win32"

test_win64:
  <<: *win64
  <<: *test_win
  cache:
    paths:
      - build/
    key: "ngsolve_win64"

# Linux
.template_test_linux: &test_linux
  stage: test
  script:
    - >-
      docker run
      -e NETGENDIR=/opt/netgen/bin
      -e PYTHONPATH=/opt/netgen/lib/python3/dist-packages
      -e MKLROOT=/opt/intel/mkl
      -e LD_LIBRARY_PATH=/opt/intel/mkl/lib/intel64
      -v /opt/intel:/opt/intel
      ngsolve_installed:$UBUNTU_VERSION
      bash -c 'cd /root/build/ngsolve && make test ARGS="-V"'

test_ubuntu_1510:
  <<: *ubuntu_1510
  <<: *test_linux

test_ubuntu_1604:
  <<: *ubuntu_1604
  <<: *test_linux

############################################
# Cleanup stage
############################################

linux_cleanup:
  stage: cleanup
  tags:
    - linux
  script:
    # remove old docker images
    docker images --no-trunc -aqf "dangling=true" | xargs docker rmi -f
  when: always
  allow_failure: true
